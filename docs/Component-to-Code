### Mapping Components to Directories
|Markdown Component | Purpose | Code Implementation | Code Details
|---|---|---|
|1. Input Data| The scraped JSON input from websites used as input to the synthesizer| ```/mockdown/src/mockdown/scraping/scraper.py```| Functions scrape and clean_output clean and format the websites into the expected input JSON format|
|2. View Hierarchy| The JSON input is parsed as a hierarchical tree of view objects to represent the UI's nested structure. | ``` /mockdown/src/mockdown/instantiation```, ```/mockdown/src/mockdown/model/view/view.py```| Instantiation creates all the anchors and visibility graphs. Check the View class with all the properties. The various anchors are defined in ```/model/anchor.py``` and the model types are in the same folder in types.py with the builder in the same folder as well. The primitives folder holds more attributes (nested in the model directory) |
|3. Constraint Grammar and Representation| The formal grammar and constraints defined| ```mockdown/src/mockdown/constraint/constraint.py``` and ``` mockdown/src/mockdown/model/anchor.py```| Anchor and Constraint classes. Anchor represents a geometric property of ta view, and the conraint class implements the y=ax + b grammar. |
|4. Local Inference: Sketch Generation| Generates a bunch of sketches from the examples using heuristics with anchors and unknown parameters (i.e. a and b are unknown).| ``` /mockdown/src/mockdown/instantiation``` basic sketches should be done here. Default templates should be found in templates folder | Iterates through View objects and applies hard-coded templates to generate a list of Constraint objects with unknown a and b parameters. Constraint types are defined under the constraints directory in types.py|
|5. Local Inference: Bayesian Learning| For each sketch, Bayesian inference findss the most probable numerical parameters| ```/mockdown/src/mockdown/learning``` | Likely under the noise tolerant learning function. Uses Generalized Linear Model for parameter estimation and MAP estimation. Outputs a set of possible candidate constraints|
|6. Global Inference: Hierarchical Decomposition| Breaks the problem into independent problems for each subcontainer for scalability | ```/mockdown/src/mockdown/pruning/blackbox.py``` | HierarchicalPruner class implements this hierarchical breakdown |
|7. Global Inference: MaxSMT Solving Candidate Selection| For each sub problem, the system formulates a MaxSMT solver and finds the largest non-conflicting subset of candidate constraints weighted by scores form the Bayesian learning phase. | ```/mockdown/src/mockdown/pruning/blackbox.py```| Look at the id_to_z3_var function, constraint_to_z3 expr, and BlackBox Pruner in synth_ambiguous. The code converts layout constraints directly to Z3 expressions|